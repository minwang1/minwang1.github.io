<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>组件 on minwang1</title>
    <link>http://minwang1.github.io/tags/%E7%BB%84%E4%BB%B6/</link>
    <description>Recent content in 组件 on minwang1</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 21 Mar 2022 22:01:14 +0800</lastBuildDate><atom:link href="http://minwang1.github.io/tags/%E7%BB%84%E4%BB%B6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Android dark 模式原理</title>
      <link>http://minwang1.github.io/post/android-drak-theme/</link>
      <pubDate>Mon, 21 Mar 2022 22:01:14 +0800</pubDate>
      
      <guid>http://minwang1.github.io/post/android-drak-theme/</guid>
      <description>Android dark 模式原理  sRgb to lab revert l lab to sRGB  float invertedL = std::min(110 - lab.L, 100.0f);
if (invertedL &amp;lt; lab.L) {// 反转后的明度低于原明度，则使用反转后的明度lab.L = invertedL;// 使用 rgb 格式返回return LabToSRGB(lab, SkColorGetA(color));} else {// 直接返回原颜色return color;} 其他应用启动本应用ActivityStack如何处理 例如当前启动配置为A，当前栈情况 A-B，应用home进入后台，通过负一屏启动应用A。 如果不做任何处理，启动后栈情况：A-B-A。而预期栈情况仍热为A-B，即用户上一次操作状况。
解决方法： 通过splashActivity做中转。 1.创建一个空的SplashActivity，theme为透明，配置为启动activity。 2.在splashActivity中做转发处理，如果当前activity栈中有其他activity，则退出splashActivity，top activity会resume，如果没有其他activity，则启动 mainactivity。
统计启动时间 adb shell am start -S -R 10 -W com.example.app/.MainActivity
-S表示每次启动前先强行停止 -R表示重复测试次数。
application attachBaseContext开始计算时间，activity onWindowFocusChanged大致为用户可见，可计算启动结束时间。</description>
    </item>
    
    <item>
      <title>LifeCycle原理</title>
      <link>http://minwang1.github.io/post/about-lifecycle/</link>
      <pubDate>Mon, 21 Mar 2022 22:01:14 +0800</pubDate>
      
      <guid>http://minwang1.github.io/post/about-lifecycle/</guid>
      <description>1.what lifeCycle use for ? Lifecycles是一个持有组件生命周期状态（Activity、Fragment）信息的类，用来解决生命周期管理问题的组件。 通过监听生命周期的方式(Handling Lifecycles with Lifecycle-Aware Components)，并允许其他对象观察此状态。
在Android框架中生命周期是由系统管理的，应用必须要遵循，否则可能会导致内存泄漏等严重问题。 此外，无法保证组件会在 Activity 或 Fragment 停止之前启动。在我们需要执行长时间运行的操作（如 onStart() 中的某种配置检查）时尤其如此。这可能会导致出现一种竞争条件，在这种条件下，onStop() 方法会在 onStart() 之前结束， 这使得组件留存的时间比所需的时间要长。
所以需要Lifecycle这个组件来帮助我们管理生命周期。 Lifecycle 是一个类，用于存储有关组件（如 Activity 或 Fragment）的生命周期状态的信息，并允许其他对象观察此状态。
lifeCycle中有如下状态图，以将状态看作图中的节点，将事件看作这些节点之间的边。
2.LifeCycle 组件的使用方法  如何让一个对象有activity生命周期？   实现LifecycleOwner接口，表示类有生命周期。 注册LifecycleObserver到LifecycleOwner中。   class MyActivity extends AppCompatActivity {  private MyLocationListener myLocationListener;   public void onCreate(...) {  myLocationListener = new MyLocationListener(this, getLifecycle(), location -&amp;gt; {  // update UI  });  Util.</description>
    </item>
    
  </channel>
</rss>
